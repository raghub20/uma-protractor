var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/injectables/ApiConfigService.html",[0,0.2,1,1.169]],["body/injectables/ApiConfigService.html",[0,0.305,1,1.782,2,1.061,3,0.583,4,0.487,5,0.487,6,3.636,7,2.16,8,0.799,9,1.555,10,3.297,11,2.379,12,2.764,13,2.047,14,0.487,15,1.357,16,2.841,17,0.923,18,1.849,19,2.749,20,1.18,21,3.297,22,2.365,23,0.799,24,0.054,25,0.583,26,0.877,27,0.799,28,1.782,29,1.02,30,1.302,31,1.357,32,2.365,33,0.877,34,0.583,35,1.849,36,1.849,37,1.061,38,0.583,39,0.399,40,1.849,41,0.923,42,3.211,43,1.6,44,2.577,45,3.211,46,2.16,47,3.211,48,3.211,49,3.211,50,3.211,51,0.031,52,0.04,53,0.031]],["title/components/AppComponent.html",[54,1.343,55,1.343]],["body/components/AppComponent.html",[3,0.524,4,0.438,5,0.438,8,0.719,14,0.438,15,1.267,17,1.371,20,1.237,24,0.054,25,0.696,26,0.617,29,0.819,30,1.237,33,0.819,34,0.524,35,2.64,38,0.524,39,0.359,51,0.028,52,0.037,53,0.028,54,2.378,55,2.285,56,3.835,57,2.89,58,2.89,59,2.89,60,2.89,61,2.32,62,1.989,63,2.208,64,2.58,65,4.304,66,2.89,67,4.304,68,3.835,69,4.304,70,3.835,71,3.835,72,5.143,73,1.267,74,4.584,75,3.835,76,2.58,77,2.89,78,3.835,79,3.835,80,2.208,81,3.68,82,0.83,83,1.664,84,2.89,85,2.32,86,3.835,87,1.102,88,2.89,89,2.89,90,2.89,91,2.89,92,2.89,93,1.944,94,3.835,95,3.835,96,2.89,97,4.584,98,2.89,99,2.89,100,2.89]],["title/injectables/AppConfigService.html",[0,0.2,19,1.552]],["body/injectables/AppConfigService.html",[0,0.268,2,0.874,3,0.48,4,0.402,5,0.703,7,1.781,8,0.658,9,1.369,10,2.902,13,1.801,14,0.402,15,1.194,17,0.761,18,1.524,19,2.081,20,1.331,21,2.902,22,2.081,23,1.024,24,0.054,25,0.84,26,0.879,27,1.024,28,2.161,29,0.945,30,0.761,33,0.565,34,0.48,37,0.874,38,0.48,39,0.329,41,0.761,43,1.319,51,0.026,52,0.035,53,0.026,63,2.753,73,1.194,82,1.183,101,3.837,102,3.351,103,4.116,104,3.216,105,3.614,106,4.423,107,3.614,108,3.614,109,2.647,110,3.837,111,2.902,112,3.614,113,2.647,114,2.647,115,3.614,116,3.614,117,4.631,118,4.981,119,2.647,120,4.116,121,2.647,122,2.647,123,1.319,124,2.647,125,2.647,126,2.125,127,2.125,128,2.647,129,2.647,130,1.559,131,2.647,132,2.647,133,2.647,134,2.647,135,2.647,136,2.125]],["title/modules/AppModule.html",[137,1.552,138,1.552]],["body/modules/AppModule.html",[3,0.562,4,0.47,5,0.47,24,0.054,33,1.087,34,0.562,35,1.784,38,0.562,39,0.385,51,0.03,52,0.039,53,0.03,55,2.655,93,2.085,137,1.784,138,3.002,139,1.544,140,1.784,141,3.575,142,3.575,143,2.312,144,2.085,145,2.487,146,2.487,147,2.487,148,2.487,149,2.492,150,3.222,151,2.487,152,1.784,153,3.098,154,3.222,155,4.014,156,2.487,157,1.544,158,3.222,159,3.098,160,3.098,161,4.014,162,4.014,163,4.014,164,4.014,165,4.014,166,4.014,167,4.014,168,4.014,169,4.014,170,4.014,171,4.014,172,2.487,173,4.014,174,2.487,175,2.487,176,4.014,177,1.544]],["title/modules/AppRoutingModule.html",[137,1.552,149,1.343]],["body/modules/AppRoutingModule.html",[3,0.708,4,0.592,5,0.592,24,0.053,33,0.989,34,0.708,38,0.708,39,0.484,41,1.121,51,0.038,52,0.045,53,0.038,139,1.944,144,2.625,149,2.308,154,3.131,158,3.718,178,3.901,179,3.901,180,4.94,181,4.631,182,3.131,183,3.901]],["title/injectables/BaseClientService.html",[0,0.2,184,1.814]],["body/injectables/BaseClientService.html",[0,0.161,1,1.364,2,0.443,3,0.243,4,0.203,5,0.203,8,0.968,11,2.361,13,1.082,14,0.203,15,0.717,17,0.786,18,1.25,20,1.165,23,1.094,24,0.054,25,0.671,26,0.958,27,0.92,28,1.364,29,1.102,30,0.624,31,1.221,32,0.772,33,0.831,34,0.243,36,0.772,37,0.443,38,0.243,39,0.166,41,0.786,46,1.841,51,0.038,52,0.021,53,0.013,62,1.499,73,0.717,76,1.461,82,1.062,87,0.385,123,1.363,130,1.629,177,0.668,184,1.461,185,2.241,186,1.076,187,1.743,188,2.171,189,2.171,190,2.524,191,1.499,192,1.461,193,2.171,194,1.721,195,1.461,196,4.052,197,2.171,198,3.144,199,3.144,200,1.461,201,1.841,202,1.866,203,1.811,204,3.144,205,1.811,206,1.341,207,2.129,208,1.082,209,1.978,210,1.461,211,2.171,212,5.142,213,1.341,214,3.454,215,3.453,216,3.453,217,1.989,218,1.989,219,4.684,220,4.301,221,5.065,222,4.301,223,3.531,224,3.907,225,4.301,226,4.484,227,2.171,228,1.341,229,2.171,230,2.524,231,2.967,232,3.253,233,4.052,234,3.144,235,3.144,236,2.171,237,2.171,238,1.341,239,2.171,240,4.052,241,2.171,242,3.453,243,1.341,244,3.144,245,3.144,246,2.171,247,2.171,248,2.171,249,1.341,250,2.171,251,2.171,252,2.171,253,1.341,254,0.902,255,1.461,256,0.772,257,0.902,258,1.341,259,1.341,260,0.902,261,1.341,262,1.341,263,1.341,264,2.334,265,1.341,266,2.171,267,3.454,268,3.454,269,3.454,270,3.454,271,3.454,272,3.454,273,1.341,274,1.341,275,1.341]],["title/injectables/BaseService.html",[0,0.2,194,1.343]],["body/injectables/BaseService.html",[0,0.234,1,1.759,2,0.717,3,0.394,4,0.33,5,0.33,8,0.782,9,1.191,11,2.475,12,2.116,14,0.33,15,1.039,16,2.477,17,1.063,18,1.251,20,1.236,23,0.782,24,0.055,25,0.571,26,0.79,27,0.782,28,2.007,29,1.099,30,1.329,31,1.619,32,2.583,33,0.79,34,0.394,36,1.251,37,0.717,38,0.394,39,0.39,41,0.624,43,1.567,51,0.021,52,0.031,53,0.021,62,1.365,64,1.461,73,1.039,80,2.129,82,1.236,83,1.251,87,1.165,102,2.116,123,1.843,130,1.698,177,1.082,185,2.583,191,1.946,194,1.567,195,2.488,200,2.727,201,2.727,202,1.946,203,2.334,208,1.567,218,1.811,254,2.116,255,3.018,256,1.811,257,2.488,264,1.567,276,1.461,277,3.145,278,2.172,279,3.254,280,2.172,281,2.172,282,2.172,283,2.172,284,2.525,285,2.116,286,2.525,287,2.172,288,2.172,289,2.525,290,2.525,291,1.743,292,2.525,293,1.743,294,1.082,295,1.743,296,1.743,297,1.743,298,1.743,299,1.743,300,1.811,301,2.525,302,1.743,303,1.743,304,1.743,305,1.743,306,2.525,307,1.743,308,1.743,309,1.743,310,1.743,311,1.743,312,2.525,313,1.743,314,2.525,315,1.743,316,1.743,317,1.743]],["title/interfaces/Error.html",[209,1.169,318,1.552]],["body/interfaces/Error.html",[3,0.584,4,0.488,5,0.488,8,0.801,14,0.488,15,1.668,23,1.023,24,0.054,25,0.916,26,1.021,27,1.293,29,1.121,38,0.584,43,2.05,51,0.031,52,0.04,53,0.031,187,3.64,191,1.396,202,1.396,209,2.278,210,2.165,217,2.369,230,3.64,231,2.583,318,1.853,319,3.218,320,2.583,321,2.583,322,3.218,323,3.215,324,5.05,325,4.778,326,4.113,327,3.302,328,4.113,329,4.113,330,2.768]],["title/injectables/HttpErrorHandlerService.html",[0,0.2,205,1.552]],["body/injectables/HttpErrorHandlerService.html",[0,0.24,2,0.746,3,0.41,4,0.343,5,0.343,8,0.94,14,0.343,17,1.086,20,1.086,23,0.805,24,0.055,25,0.587,26,0.691,27,0.805,29,0.807,30,0.649,31,0.746,33,0.807,34,0.41,37,0.746,38,0.41,39,0.28,40,1.3,41,0.649,51,0.022,52,0.032,53,0.022,62,1.404,73,1.069,81,1.813,82,0.93,83,1.3,87,0.649,130,1.431,152,1.863,191,1.791,202,1.791,205,1.863,207,1.863,208,1.126,209,2.269,210,2.177,223,1.813,224,3.648,242,2.597,260,1.52,264,1.612,294,1.884,323,1.52,331,3.313,332,1.813,333,3.235,334,4.127,335,1.813,336,2.057,337,2.258,338,2.939,339,2.939,340,3.235,341,2.258,342,3.235,343,4.545,344,3.235,345,3.313,346,4.368,347,3.235,348,3.313,349,3.235,350,2.258,351,3.235,352,4.127,353,3.235,354,3.779,355,2.258,356,1.813,357,4.127,358,3.235,359,2.258,360,2.543,361,3.235,362,3.235,363,3.235,364,4.127,365,2.258,366,2.258,367,2.258,368,2.258,369,2.258,370,2.258,371,3.235,372,3.235,373,2.258,374,2.597,375,2.258,376,2.258,377,2.258,378,2.258,379,2.258,380,2.258,381,2.258,382,2.258,383,2.258,384,2.258,385,1.813,386,2.258,387,1.813,388,2.258,389,2.258,390,2.258,391,2.258,392,2.258,393,2.258]],["title/injectables/LanguageDetectionService.html",[0,0.2,394,1.814]],["body/injectables/LanguageDetectionService.html",[0,0.153,2,0.416,3,0.228,4,0.191,5,0.397,8,0.313,9,0.781,13,1.028,14,0.545,15,0.681,17,0.362,20,1.177,22,1.187,23,0.313,24,0.055,25,0.228,26,0.56,27,0.313,29,0.986,30,0.362,31,0.416,33,0.44,34,0.228,37,0.416,38,0.606,39,0.156,40,0.725,41,1.402,44,1.655,51,0.012,52,0.02,53,0.012,63,1.187,73,0.681,82,1.288,87,0.87,104,0.847,111,1.01,126,2.881,130,1.768,143,1.187,157,1.888,192,1.762,207,1.924,217,2.277,218,0.725,232,1.01,285,1.762,294,1.028,335,1.01,336,2.1,338,1.387,339,0.847,356,1.01,360,2.415,394,1.387,395,2.277,396,0.725,397,2.062,398,3.028,399,3.989,400,2.062,401,2.062,402,2.619,403,2.062,404,3.535,405,2.062,406,2.619,407,3.028,408,2.619,409,2.619,410,2.619,411,3.028,412,3.028,413,3.028,414,3.028,415,2.062,416,3.287,417,1.259,418,3.028,419,2.062,420,2.835,421,3.341,422,1.259,423,1.259,424,2.062,425,1.259,426,2.062,427,2.062,428,2.619,429,2.062,430,2.881,431,1.259,432,2.062,433,2.062,434,2.062,435,2.619,436,2.619,437,3.789,438,2.619,439,0.847,440,1.01,441,1.387,442,1.259,443,2.102,444,4.213,445,1.259,446,1.259,447,2.062,448,1.259,449,2.102,450,2.102,451,1.259,452,1.259,453,3.789,454,1.259,455,2.062,456,1.259,457,1.259,458,1.01,459,2.619,460,1.259,461,1.259,462,2.619,463,1.259,464,3.028,465,1.259,466,1.259,467,1.259,468,1.259,469,1.259,470,2.619,471,2.062,472,2.062,473,1.01,474,1.259,475,1.259,476,1.259,477,1.259,478,1.259,479,1.259,480,2.062,481,1.259,482,2.062,483,2.062,484,1.259,485,2.062,486,2.062,487,1.259,488,3.028,489,1.259,490,2.062,491,1.259,492,1.259,493,1.259,494,3.589,495,2.062,496,2.062,497,1.259,498,1.259,499,1.259,500,1.259,501,1.259,502,1.259,503,1.259,504,1.259,505,1.259,506,1.259,507,1.259,508,1.259,509,1.259,510,1.259,511,1.259,512,1.259,513,1.259,514,1.259,515,1.259,516,1.259,517,1.259,518,1.259,519,1.259,520,1.259,521,1.259,522,1.259,523,1.259,524,1.01,525,1.01,526,2.431,527,1.762,528,2.062,529,2.062,530,3.955,531,2.062,532,2.062,533,2.062,534,1.259,535,2.431,536,1.01,537,1.655,538,1.01,539,2.102,540,1.655,541,1.01,542,3.589,543,3.589,544,1.655,545,2.062,546,2.062,547,2.062,548,3.589,549,2.062,550,2.062,551,1.01,552,1.01,553,1.259,554,1.259,555,1.259,556,0.847,557,1.259,558,1.259]],["title/classes/ParameterCodec.html",[39,0.335,300,1.552]],["body/classes/ParameterCodec.html",[0,0.237,1,1.385,3,0.402,4,0.336,5,0.336,8,0.551,9,0.839,11,2.251,12,1.491,14,0.336,16,1.838,17,0.637,20,1.176,23,1.018,24,0.055,25,0.742,26,0.874,27,1.018,28,1.775,29,1.14,30,1.176,31,1.647,32,2.153,33,0.799,34,0.402,36,1.276,37,0.732,38,0.402,39,0.396,41,0.637,43,2.251,51,0.022,52,0.031,53,0.022,62,0.961,64,2.147,73,1.054,80,1.838,82,1.246,87,1.075,102,1.491,123,1.104,130,1.71,177,1.104,185,2.497,191,1.623,194,1.104,195,1.491,200,2.147,201,1.491,202,1.623,203,1.838,208,1.104,218,2.6,254,1.491,255,2.753,256,1.276,257,2.516,264,1.59,276,1.491,279,2.562,284,1.779,285,1.491,286,1.779,289,1.779,290,3.002,291,2.562,292,3.284,293,2.562,294,1.59,295,2.562,296,2.562,297,2.562,298,2.562,299,2.562,300,2.153,301,3.284,302,2.562,303,1.779,304,2.562,305,1.779,306,3.284,307,2.562,308,1.779,309,2.562,310,1.779,311,1.779,312,2.562,313,1.779,314,2.562,315,1.779,316,1.779,317,1.779,559,2.216,560,3.191,561,3.191,562,3.191,563,3.191,564,2.216,565,2.216,566,2.216,567,2.216]],["title/injectables/RemoteLoggingService.html",[0,0.2,336,1.343]],["body/injectables/RemoteLoggingService.html",[0,0.199,2,0.577,3,0.317,4,0.265,5,0.265,8,0.906,9,1.013,11,2.063,14,0.265,15,0.884,16,1.872,17,0.502,20,1.128,22,1.541,23,0.809,24,0.055,25,0.59,26,0.838,27,0.809,29,1.048,30,1.19,31,1.737,33,0.778,34,0.317,37,0.577,38,0.317,39,0.217,40,1.007,41,1.238,46,1.176,51,0.017,52,0.026,53,0.017,62,1.161,73,0.884,76,1.8,80,1.007,82,0.934,83,1.541,87,0.502,104,2.785,123,1.956,130,0.662,177,0.871,190,2.148,191,1.41,202,1.796,203,2.097,207,2.722,208,1.333,209,2.149,216,1.403,256,1.007,264,2.147,321,2.148,323,3.332,330,2.187,336,1.333,339,1.8,345,3.323,348,2.148,385,2.148,420,1.8,439,1.176,443,1.403,449,1.403,450,2.148,568,3.323,569,1.403,570,2.675,571,2.675,572,3.641,573,4.308,574,2.675,575,1.748,576,2.675,577,1.748,578,2.675,579,4.855,580,4.555,581,3.641,582,1.748,583,3.25,584,2.923,585,2.675,586,2.675,587,1.748,588,1.748,589,2.675,590,1.403,591,2.148,592,1.403,593,1.748,594,1.748,595,1.748,596,1.748,597,1.748,598,1.748,599,3.25,600,1.748,601,1.748,602,1.748,603,1.748,604,1.748,605,1.748,606,1.748,607,1.748,608,1.748,609,2.675,610,1.748,611,1.748,612,2.675,613,1.748,614,1.748,615,1.748,616,1.748,617,1.748,618,1.748,619,2.675,620,1.748,621,1.748,622,2.675,623,3.25,624,2.675,625,1.748,626,1.748,627,1.748,628,2.675,629,1.748,630,1.748,631,2.675]],["title/coverage.html",[632,2.938]],["body/coverage.html",[0,0.378,1,1.353,5,0.473,6,2.504,7,2.713,19,1.796,24,0.053,26,0.666,39,0.387,51,0.03,52,0.039,53,0.03,54,1.554,55,1.554,61,2.504,87,0.896,101,2.504,184,2.099,185,2.572,186,2.504,194,1.554,205,1.796,209,1.749,276,2.713,300,1.796,318,1.796,320,2.504,331,2.504,332,2.504,336,1.554,394,2.099,395,2.884,396,2.884,441,2.099,526,4.02,527,2.099,556,2.099,568,2.504,569,2.504,632,2.504,633,3.119,634,3.119,635,3.119,636,5.434,637,4.467,638,4.031,639,3.119,640,4.031,641,3.119,642,3.119,643,5.096,644,2.504,645,2.504,646,3.119,647,3.236,648,2.504,649,2.504,650,3.119,651,3.119]],["title/dependencies.html",[140,1.864,652,2.26]],["body/dependencies.html",[24,0.054,34,0.662,51,0.036,52,0.043,53,0.036,140,2.101,156,3.572,157,2.218,172,2.93,174,2.93,175,2.93,182,2.93,260,2.456,590,2.93,591,2.93,592,3.572,653,3.649,654,3.649,655,3.649,656,3.649,657,5.275,658,3.649,659,3.649,660,3.649,661,3.649,662,2.93,663,3.649,664,3.649,665,3.649,666,3.649,667,3.649,668,3.649,669,3.649,670,3.649,671,3.649,672,3.649,673,3.649]],["title/miscellaneous/functions.html",[674,1.302,675,2.598]],["body/miscellaneous/functions.html",[9,1.576,13,1.634,14,0.497,23,1.138,24,0.05,25,0.83,27,1.138,28,1.422,29,0.7,31,1.083,51,0.032,52,0.041,53,0.032,63,2.397,82,1.382,143,2.633,157,2.279,192,3.077,217,1.887,338,2.8,360,2.8,395,1.887,396,2.859,399,3.986,404,2.631,416,3.341,420,2.205,430,2.631,524,2.631,525,3.341,527,3.077,535,3.671,536,2.631,537,3.341,538,2.631,539,3.671,540,3.341,541,2.631,544,2.631,551,2.631,552,2.631,556,3.077,644,3.341,645,3.341,647,2.631,648,3.671,649,3.341,674,1.887,675,2.631,676,3.862,677,4.162,678,3.278,679,3.278,680,3.278,681,3.278]],["title/index.html",[14,0.343,682,2.26,683,2.26]],["body/index.html",[4,0.51,24,0.041,25,0.61,35,1.937,51,0.033,52,0.041,53,0.033,54,2.306,85,3.715,87,0.967,110,3.715,136,2.7,152,1.937,215,4.017,327,2.7,330,2.846,374,2.7,387,2.7,662,2.7,684,3.363,685,4.23,686,3.363,687,4.627,688,3.363,689,3.363,690,5.184,691,3.363,692,3.363,693,3.363,694,3.363,695,3.363,696,3.363,697,4.627,698,3.363,699,5.004,700,3.363,701,3.363,702,3.363,703,3.363,704,3.363,705,3.363,706,3.363,707,4.23,708,4.23,709,4.856,710,3.363,711,4.23,712,4.23,713,3.363,714,4.856,715,3.363,716,3.363,717,3.363,718,4.627,719,3.363,720,3.363,721,3.363,722,3.363]],["title/modules.html",[139,1.824]],["body/modules.html",[24,0.047,51,0.041,52,0.047,53,0.041,138,2.405,139,2.082,149,2.082,157,2.082,458,3.353,584,3.353,723,4.177,724,4.82,725,4.177]],["title/overview.html",[726,2.938]],["body/overview.html",[2,1.247,24,0.051,39,0.469,51,0.037,52,0.044,53,0.037,54,1.882,55,2.648,93,2.541,127,3.031,137,2.174,138,3.059,139,1.882,140,2.174,141,3.031,142,3.031,143,2.174,144,2.541,145,3.031,146,3.031,147,3.031,148,3.031,149,2.428,150,3.646,151,3.031,152,2.174,318,2.174,473,3.911,726,3.031,727,3.776]],["title/miscellaneous/variables.html",[674,1.302,728,2.598]],["body/miscellaneous/variables.html",[14,0.628,24,0.047,51,0.04,52,0.047,53,0.04,294,2.063,395,2.384,396,2.762,439,2.786,440,3.324,441,3.407,674,2.384,676,3.324,728,3.324]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":488,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["0.8.26",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":473,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"overview.html":{}}}],["1.1.20150312",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["1.9.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":616,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["100",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["15px",{"_index":92,"title":{},"body":{"components/AppComponent.html":{}}}],["2",{"_index":127,"title":{},"body":{"injectables/AppConfigService.html":{},"overview.html":{}}}],["2.0.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":359,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["5",{"_index":554,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["5/5",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":393,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["6.3.3",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":727,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["7.2.6",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["7.3.3",{"_index":662,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["7.3.4",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["_besides_",{"_index":455,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["_rooturl",{"_index":195,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["accessors",{"_index":277,"title":{},"body":{"injectables/BaseService.html":{}}}],["accordingly",{"_index":370,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["action",{"_index":212,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["actionname",{"_index":346,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["actual_component",{"_index":100,"title":{},"body":{"components/AppComponent.html":{}}}],["add",{"_index":468,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["against",{"_index":401,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["alpha",{"_index":684,"title":{},"body":{"index.html":{}}}],["already",{"_index":498,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["angular",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":590,"title":{},"body":{"injectables/RemoteLoggingService.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["angular/compiler",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":34,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":182,"title":{},"body":{"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["api",{"_index":11,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["apiconfig",{"_index":42,"title":{},"body":{"injectables/ApiConfigService.html":{}}}],["apiconfig.base_url",{"_index":50,"title":{},"body":{"injectables/ApiConfigService.html":{}}}],["apiconfig.host",{"_index":48,"title":{},"body":{"injectables/ApiConfigService.html":{}}}],["apiconfig.port",{"_index":49,"title":{},"body":{"injectables/ApiConfigService.html":{}}}],["apiconfig.protocol",{"_index":47,"title":{},"body":{"injectables/ApiConfigService.html":{}}}],["apiconfigservice",{"_index":1,"title":{"injectables/ApiConfigService.html":{}},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"coverage.html":{}}}],["apiconfiguration.rooturl",{"_index":286,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["app",{"_index":35,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"index.html":{}}}],["app.component",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":71,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":69,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":55,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"coverage.html":{},"overview.html":{}}}],["appconfigservice",{"_index":19,"title":{"injectables/AppConfigService.html":{}},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"coverage.html":{}}}],["application",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["application's",{"_index":432,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["application/json",{"_index":601,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["appmodule",{"_index":138,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":149,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":230,"title":{},"body":{"injectables/BaseClientService.html":{},"interfaces/Error.html":{}}}],["artifacts",{"_index":700,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":694,"title":{},"body":{"index.html":{}}}],["available",{"_index":584,"title":{},"body":{"injectables/RemoteLoggingService.html":{},"modules.html":{}}}],["avoid",{"_index":486,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["avoiding",{"_index":469,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["back",{"_index":595,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["backend",{"_index":371,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["base",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["baseclientservice",{"_index":184,"title":{"injectables/BaseClientService.html":{}},"body":{"injectables/BaseClientService.html":{},"coverage.html":{}}}],["based",{"_index":192,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["baseservice",{"_index":194,"title":{"injectables/BaseService.html":{}},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"coverage.html":{}}}],["baseservice:53",{"_index":258,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["baseservice:73",{"_index":253,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["being",{"_index":245,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["besides",{"_index":419,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["best",{"_index":512,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["beta.23",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["body",{"_index":242,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/HttpErrorHandlerService.html":{}}}],["boolean",{"_index":581,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["bootstrap",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["bring",{"_index":594,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["browse",{"_index":724,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/LanguageDetectionService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"modules.html":{}}}],["browsermodule",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":699,"title":{},"body":{"index.html":{}}}],["call",{"_index":216,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/RemoteLoggingService.html":{}}}],["calls",{"_index":190,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/RemoteLoggingService.html":{}}}],["callstack",{"_index":585,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["cards",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["catch",{"_index":449,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["catcherror",{"_index":261,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["caught",{"_index":349,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["change",{"_index":387,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"index.html":{}}}],["check",{"_index":721,"title":{},"body":{"index.html":{}}}],["class",{"_index":39,"title":{"classes/ParameterCodec.html":{}},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":559,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["classlist.js",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["cli",{"_index":687,"title":{},"body":{"index.html":{}}}],["client",{"_index":208,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["client.service.ts",{"_index":186,"title":{},"body":{"injectables/BaseClientService.html":{},"coverage.html":{}}}],["client.service.ts:15",{"_index":206,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["client.service.ts:32",{"_index":238,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["client.service.ts:42",{"_index":228,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["client.service.ts:53",{"_index":249,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["client.service.ts:65",{"_index":243,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["client.service.ts:76",{"_index":213,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["closely",{"_index":427,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["closest",{"_index":406,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["clues",{"_index":376,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["cluster_appmodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":374,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"index.html":{}}}],["codec",{"_index":257,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["col",{"_index":389,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["compare",{"_index":400,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["component",{"_index":54,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":98,"title":{},"body":{"components/AppComponent.html":{}}}],["components",{"_index":56,"title":{},"body":{"components/AppComponent.html":{}}}],["config",{"_index":28,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"miscellaneous/functions.html":{}}}],["config.service",{"_index":36,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["config.service.ts",{"_index":7,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"coverage.html":{}}}],["config.service.ts:14",{"_index":21,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{}}}],["config.service.ts:27",{"_index":119,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config.service.ts:34",{"_index":109,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config.service.ts:41",{"_index":114,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["configdata",{"_index":103,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["configstr",{"_index":124,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["configuration",{"_index":13,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["configured",{"_index":418,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["console.error('logged",{"_index":607,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["console.log('logged",{"_index":608,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["console.log(`logger",{"_index":604,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["console.warn('while",{"_index":365,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["const",{"_index":41,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["constructor",{"_index":17,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["constructor(@inject('appconfig",{"_index":122,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["constructor(config",{"_index":18,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{}}}],["constructor(injector",{"_index":575,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["constructor(logger",{"_index":335,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{}}}],["constructor(private",{"_index":40,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["constructor(protected",{"_index":313,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["contain",{"_index":375,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["container",{"_index":90,"title":{},"body":{"components/AppComponent.html":{}}}],["containing",{"_index":225,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["core",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":256,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["correctly",{"_index":293,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["country",{"_index":478,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["coverage",{"_index":632,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":254,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["current",{"_index":420,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{}}}],["current.split",{"_index":501,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["currentlocale",{"_index":543,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["custom",{"_index":291,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["data",{"_index":102,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["declarations",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["declare",{"_index":442,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["decode",{"_index":306,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["decodekey",{"_index":560,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["decodekey(key",{"_index":307,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["decodeuricomponent(key",{"_index":308,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["decodeuricomponent(value",{"_index":310,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["decodevalue",{"_index":561,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["decodevalue(value",{"_index":309,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["default",{"_index":217,"title":{},"body":{"injectables/BaseClientService.html":{},"interfaces/Error.html":{},"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["defaultlanguage",{"_index":409,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["defined",{"_index":20,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["delete",{"_index":196,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["delete(route",{"_index":211,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["dependencies",{"_index":140,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":529,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["description",{"_index":8,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["detected",{"_index":536,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["detection.service.ts",{"_index":396,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["detection.service.ts:20",{"_index":431,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["detection.service.ts:26",{"_index":415,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["detection.service.ts:44",{"_index":423,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["detection.service.ts:51",{"_index":422,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["detection.service.ts:58",{"_index":417,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["detection.service.ts:67",{"_index":425,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["detects",{"_index":397,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["detectsupporteduserlanguage",{"_index":527,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dev",{"_index":136,"title":{},"body":{"injectables/AppConfigService.html":{},"index.html":{}}}],["development",{"_index":689,"title":{},"body":{"index.html":{}}}],["directive",{"_index":96,"title":{},"body":{"components/AppComponent.html":{}}}],["directives",{"_index":99,"title":{},"body":{"components/AppComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":698,"title":{},"body":{"index.html":{}}}],["directly",{"_index":284,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["directory",{"_index":703,"title":{},"body":{"index.html":{}}}],["display",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["dist",{"_index":702,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":457,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["dom",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["done",{"_index":500,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["down",{"_index":477,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["duplicates",{"_index":470,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["dynamic",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":625,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["e.g",{"_index":480,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["e2e",{"_index":715,"title":{},"body":{"index.html":{}}}],["element",{"_index":95,"title":{},"body":{"components/AppComponent.html":{}}}],["en",{"_index":430,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["encode",{"_index":301,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["encodekey",{"_index":562,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["encodekey(key",{"_index":302,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["encoder",{"_index":317,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["encodeuricomponent(key",{"_index":303,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["encodeuricomponent(value",{"_index":305,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["encodevalue",{"_index":563,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["encodevalue(value",{"_index":304,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["end",{"_index":714,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":220,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["environment",{"_index":115,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["err",{"_index":450,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["error",{"_index":209,"title":{"interfaces/Error.html":{}},"body":{"injectables/BaseClientService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{}}}],["error(errormsg",{"_index":382,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["error.error",{"_index":367,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["error.error.message",{"_index":364,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["error.message",{"_index":609,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["error.status",{"_index":358,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["error.tostring",{"_index":610,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["errorhandler",{"_index":204,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["errormsg",{"_index":357,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["errors",{"_index":321,"title":{},"body":{"interfaces/Error.html":{},"injectables/RemoteLoggingService.html":{}}}],["es",{"_index":482,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["es_us",{"_index":481,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["execute",{"_index":711,"title":{},"body":{"index.html":{}}}],["executing",{"_index":234,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["existing",{"_index":472,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["expand",{"_index":466,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["expected",{"_index":226,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["expectiing",{"_index":229,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["expecting",{"_index":239,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["export",{"_index":38,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["exports",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"overview.html":{}}}],["extends",{"_index":193,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["facing",{"_index":380,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["fallback",{"_index":285,"title":{},"body":{"injectables/BaseService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{}}}],["false",{"_index":605,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{}}}],["files",{"_index":327,"title":{},"body":{"interfaces/Error.html":{},"index.html":{}}}],["find",{"_index":490,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["findbestmatch",{"_index":497,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["findintersection",{"_index":493,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["finds",{"_index":426,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["first",{"_index":491,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["flag",{"_index":705,"title":{},"body":{"index.html":{}}}],["flexlayoutmodule",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":111,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/LanguageDetectionService.html":{}}}],["function",{"_index":526,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"coverage.html":{}}}],["functions",{"_index":675,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":717,"title":{},"body":{"index.html":{}}}],["g",{"_index":133,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["generate",{"_index":697,"title":{},"body":{"index.html":{}}}],["generated",{"_index":686,"title":{},"body":{"index.html":{}}}],["generic",{"_index":189,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["get(route",{"_index":227,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["getallsupportedlanguages",{"_index":556,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getalluserlanguages",{"_index":411,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["getalternateuserlanguages",{"_index":412,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["getbyid",{"_index":197,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["getbyid(route",{"_index":237,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["getconfig",{"_index":105,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getconfig(key",{"_index":108,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getcurrentlanguage",{"_index":413,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["getenv",{"_index":106,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getrooturl",{"_index":282,"title":{},"body":{"injectables/BaseService.html":{}}}],["gets",{"_index":9,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{}}}],["getting",{"_index":682,"title":{"index.html":{}},"body":{}}],["geturl",{"_index":572,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["getuserlanguage",{"_index":414,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["global",{"_index":10,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{}}}],["go",{"_index":720,"title":{},"body":{"index.html":{}}}],["good",{"_index":522,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["grab",{"_index":439,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/variables.html":{}}}],["graceful",{"_index":460,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["graph",{"_index":725,"title":{},"body":{"modules.html":{}}}],["handle",{"_index":294,"title":{},"body":{"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"miscellaneous/variables.html":{}}}],["handlehttperrorresponse",{"_index":333,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["handlehttperrorresponse(actionname",{"_index":340,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["handler",{"_index":210,"title":{},"body":{"injectables/BaseClientService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{}}}],["handler.service",{"_index":263,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["handler.service.ts",{"_index":332,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"coverage.html":{}}}],["handler.service.ts:11",{"_index":337,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["handler.service.ts:23",{"_index":341,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["handler.service.ts:49",{"_index":350,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["happen",{"_index":505,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["hashlocationstrategy",{"_index":589,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["headers",{"_index":599,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["help",{"_index":718,"title":{},"body":{"index.html":{}}}],["html",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["http",{"_index":202,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["http://localhost:4200",{"_index":693,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":203,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["httpclientmodule",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["httperr",{"_index":381,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["httperrorhandlerservice",{"_index":205,"title":{"injectables/HttpErrorHandlerService.html":{}},"body":{"injectables/BaseClientService.html":{},"injectables/HttpErrorHandlerService.html":{},"coverage.html":{}}}],["httpheaders",{"_index":593,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["httpheaders({'content",{"_index":600,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["httpparametercodec",{"_index":290,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["httpparams",{"_index":255,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["httpresponse",{"_index":259,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["https://github.com/angular/angular/issues/18261",{"_index":299,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["identifier",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["ie",{"_index":232,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/LanguageDetectionService.html":{}}}],["ignore",{"_index":311,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["implements",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["import",{"_index":33,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["imports",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["including",{"_index":681,"title":{},"body":{"miscellaneous/functions.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["inherited",{"_index":252,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["initialize",{"_index":22,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["inject",{"_index":121,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{},"overview.html":{}}}],["injection",{"_index":279,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["injector",{"_index":207,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["injector.create",{"_index":528,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["innocent",{"_index":510,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["instanceof",{"_index":612,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["interface",{"_index":318,"title":{"interfaces/Error.html":{}},"body":{"interfaces/Error.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":319,"title":{},"body":{"interfaces/Error.html":{}}}],["intersect",{"_index":492,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["inverted",{"_index":507,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["iserror",{"_index":580,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["iterable",{"_index":445,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["js",{"_index":592,"title":{},"body":{"injectables/RemoteLoggingService.html":{},"dependencies.html":{}}}],["json",{"_index":271,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["json.parse(configstr",{"_index":129,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["json.stringify(config",{"_index":125,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["json.stringify(error.error",{"_index":379,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["karma",{"_index":713,"title":{},"body":{"index.html":{}}}],["key",{"_index":43,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"classes/ParameterCodec.html":{}}}],["lang",{"_index":453,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["langauge",{"_index":537,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["langs",{"_index":444,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["langs.findindex((v",{"_index":517,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["langs.indexof(current",{"_index":516,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["langs.json",{"_index":506,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["langs.length",{"_index":514,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["langs.push(...v",{"_index":558,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["langs[i",{"_index":519,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["language",{"_index":399,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["languagedetectionservice",{"_index":394,"title":{"injectables/LanguageDetectionService.html":{}},"body":{"injectables/LanguageDetectionService.html":{},"coverage.html":{}}}],["languagedetectionservice(injector.get(remoteloggingservice",{"_index":533,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["languagedetectionservice.defaultlanguage",{"_index":464,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["languages",{"_index":404,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["last",{"_index":615,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["layout",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["lds",{"_index":532,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["lds.getuserlanguage",{"_index":534,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["lds.supportedlangs.foreach(v",{"_index":557,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["legend",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"overview.html":{}}}],["less",{"_index":479,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["lets",{"_index":614,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["list",{"_index":402,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["literal",{"_index":113,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["load",{"_index":544,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["loadconfig",{"_index":648,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loader!../../../locale/messages.${currentlocale}.xlf",{"_index":547,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["locale",{"_index":535,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["locale_id",{"_index":436,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["localeproviders",{"_index":542,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["localization",{"_index":326,"title":{},"body":{"interfaces/Error.html":{}}}],["localized",{"_index":403,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["location",{"_index":628,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["location).path(true",{"_index":630,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["locationstrategy",{"_index":588,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["log",{"_index":573,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["log(message",{"_index":578,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["logerror",{"_index":574,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["logerror(error",{"_index":586,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["logged",{"_index":363,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["logger",{"_index":338,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["logger.logerror(err",{"_index":550,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["logging",{"_index":345,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/RemoteLoggingService.html":{}}}],["logging.service",{"_index":356,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{}}}],["logging.service.ts",{"_index":569,"title":{},"body":{"injectables/RemoteLoggingService.html":{},"coverage.html":{}}}],["logging.service.ts:14",{"_index":576,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["logging.service.ts:41",{"_index":582,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["logging.service.ts:57",{"_index":587,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["logging.service.ts:78",{"_index":577,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["logout",{"_index":343,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["made",{"_index":509,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["make",{"_index":188,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["manually",{"_index":461,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["map",{"_index":433,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["map([['en",{"_index":452,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["map(langs",{"_index":448,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["matbuttonmodule",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["matcardmodule",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["match",{"_index":407,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["matches",{"_index":428,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["matching",{"_index":52,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matdividermodule",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["matformfieldmodule",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["maticonmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["matinputmodule",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["matoptionmodule",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["matselectmodule",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["matsnackbarmodule",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["mattablemodule",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["mattoolbarmodule",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["maybe",{"_index":386,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["maybeloadlocaleproviders",{"_index":644,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["maybeloadlocaleproviders(logger",{"_index":541,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["maybeloadlocaleprovidersfromquerymap",{"_index":645,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["maybeloadlocaleprovidersfromquerymap(logger",{"_index":552,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":323,"title":{},"body":{"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/RemoteLoggingService.html":{}}}],["messages",{"_index":325,"title":{},"body":{"interfaces/Error.html":{}}}],["metadata",{"_index":66,"title":{},"body":{"components/AppComponent.html":{}}}],["method/action",{"_index":347,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["methods",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["miscellaneous",{"_index":674,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mistake",{"_index":511,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["model",{"_index":231,"title":{},"body":{"injectables/BaseClientService.html":{},"interfaces/Error.html":{}}}],["models",{"_index":236,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["module",{"_index":137,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":139,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":719,"title":{},"body":{"index.html":{}}}],["move",{"_index":513,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["n/a",{"_index":624,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["name",{"_index":25,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["navigate",{"_index":692,"title":{},"body":{"index.html":{}}}],["network",{"_index":369,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["new",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{},"index.html":{}}}],["newparams",{"_index":201,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["ng",{"_index":690,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngoninit",{"_index":74,"title":{},"body":{"components/AppComponent.html":{}}}],["non",{"_index":545,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["noted",{"_index":361,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["now",{"_index":475,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["null",{"_index":126,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/LanguageDetectionService.html":{}}}],["nulls",{"_index":521,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["number",{"_index":44,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/LanguageDetectionService.html":{}}}],["object",{"_index":244,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["observable",{"_index":223,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/HttpErrorHandlerService.html":{}}}],["observableinput",{"_index":354,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["observe",{"_index":269,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["occasion",{"_index":344,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["occured",{"_index":329,"title":{},"body":{"interfaces/Error.html":{}}}],["occurred",{"_index":348,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/RemoteLoggingService.html":{}}}],["once",{"_index":597,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["oninit",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["operations",{"_index":32,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["optional",{"_index":27,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpErrorHandlerService.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":726,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":652,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":91,"title":{},"body":{"components/AppComponent.html":{}}}],["page",{"_index":353,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["palette.scss",{"_index":89,"title":{},"body":{"components/AppComponent.html":{}}}],["param",{"_index":264,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["parameter",{"_index":292,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["parameter_codec",{"_index":312,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["parametercodec",{"_index":300,"title":{"classes/ParameterCodec.html":{}},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"coverage.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":267,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["parsing",{"_index":627,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["parts",{"_index":483,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["parts[0",{"_index":485,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["performing",{"_index":222,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["pipe(catcherror(this.errorhandler.handlehttperrorresponse(action",{"_index":272,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["plain",{"_index":515,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["plus",{"_index":295,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["populating",{"_index":328,"title":{},"body":{"interfaces/Error.html":{}}}],["possible",{"_index":525,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["post",{"_index":198,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["post(route",{"_index":241,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["posted",{"_index":246,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["posting",{"_index":247,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["posttoserver",{"_index":596,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["posttoserver(message",{"_index":598,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["preferred",{"_index":429,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["preferredlang",{"_index":462,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["previous",{"_index":494,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["private",{"_index":123,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["prod",{"_index":704,"title":{},"body":{"index.html":{}}}],["production",{"_index":706,"title":{},"body":{"index.html":{}}}],["project",{"_index":685,"title":{},"body":{"index.html":{}}}],["propagate",{"_index":520,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["properties",{"_index":15,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["protected",{"_index":200,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["protractor",{"_index":716,"title":{},"body":{"index.html":{}}}],["provide",{"_index":530,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["providedin",{"_index":37,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["providers",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["public",{"_index":104,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["put",{"_index":199,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["put(route",{"_index":248,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["putting",{"_index":251,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["readme",{"_index":722,"title":{},"body":{"index.html":{}}}],["readonlyarray",{"_index":421,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["really",{"_index":503,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["redirecting",{"_index":342,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["redirects",{"_index":351,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["redirecttologout",{"_index":334,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["regexp(search",{"_index":132,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["reload",{"_index":695,"title":{},"body":{"index.html":{}}}],["remote",{"_index":339,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["remoteloggingservice",{"_index":336,"title":{"injectables/RemoteLoggingService.html":{}},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{}}}],["replacement",{"_index":118,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["replacestring",{"_index":107,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["replacestring(str",{"_index":116,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["request",{"_index":221,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["requests",{"_index":235,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["require",{"_index":441,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["require('../../../locale/langs.json",{"_index":446,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["require(`raw",{"_index":546,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["reset",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resp/public#/logout?code=4",{"_index":392,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["response",{"_index":224,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/HttpErrorHandlerService.html":{}}}],["responsetype",{"_index":270,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["result",{"_index":51,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":53,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":130,"title":{},"body":{"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["returned",{"_index":372,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["returning",{"_index":405,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["returns",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":30,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["rooturl",{"_index":16,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["rooturl(rooturl",{"_index":316,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["route",{"_index":219,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["routermodule",{"_index":181,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":183,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":180,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routing.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":179,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["run",{"_index":215,"title":{},"body":{"injectables/BaseClientService.html":{},"index.html":{}}}],["running",{"_index":707,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":260,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/HttpErrorHandlerService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":262,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["sass/cartus",{"_index":88,"title":{},"body":{"components/AppComponent.html":{}}}],["scaffolding",{"_index":696,"title":{},"body":{"index.html":{}}}],["search",{"_index":117,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["second",{"_index":112,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["see",{"_index":298,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["selected",{"_index":424,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["selector",{"_index":67,"title":{},"body":{"components/AppComponent.html":{}}}],["sending",{"_index":570,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["serve",{"_index":691,"title":{},"body":{"index.html":{}}}],["server",{"_index":330,"title":{},"body":{"interfaces/Error.html":{},"injectables/RemoteLoggingService.html":{},"index.html":{}}}],["service",{"_index":191,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["service.ts",{"_index":276,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"coverage.html":{}}}],["service.ts:12",{"_index":566,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["service.ts:17",{"_index":567,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["service.ts:22",{"_index":564,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["service.ts:27",{"_index":565,"title":{},"body":{"classes/ParameterCodec.html":{}}}],["service.ts:40",{"_index":278,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:53",{"_index":281,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:59",{"_index":283,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:66",{"_index":288,"title":{},"body":{"injectables/BaseService.html":{}}}],["service.ts:73",{"_index":280,"title":{},"body":{"injectables/BaseService.html":{}}}],["services",{"_index":12,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["set",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{}}}],["setrooturl(rooturl",{"_index":287,"title":{},"body":{"injectables/BaseService.html":{}}}],["sets",{"_index":289,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["setteing",{"_index":551,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["settimeout",{"_index":390,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["setting",{"_index":524,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["settings",{"_index":538,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["sf.tostring()).join('\\n",{"_index":621,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["shouldn't",{"_index":504,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["side",{"_index":368,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["sign",{"_index":296,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["single",{"_index":240,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["site",{"_index":539,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["solution",{"_index":571,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["someone",{"_index":508,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["something",{"_index":388,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"index.html":{}}}],["src/.../language",{"_index":676,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":677,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app",{"_index":178,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:11",{"_index":75,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:17",{"_index":77,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/core/models/error.model.ts",{"_index":320,"title":{},"body":{"interfaces/Error.html":{},"coverage.html":{}}}],["src/app/core/services/api",{"_index":6,"title":{},"body":{"injectables/ApiConfigService.html":{},"coverage.html":{}}}],["src/app/core/services/app",{"_index":101,"title":{},"body":{"injectables/AppConfigService.html":{},"coverage.html":{}}}],["src/app/core/services/base",{"_index":185,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"classes/ParameterCodec.html":{},"coverage.html":{}}}],["src/app/core/services/http",{"_index":331,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"coverage.html":{}}}],["src/app/core/services/language",{"_index":395,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/services/remote",{"_index":568,"title":{},"body":{"injectables/RemoteLoggingService.html":{},"coverage.html":{}}}],["src/locale/langs.json",{"_index":434,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["src/main.ts",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stack",{"_index":579,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["stackframes.map(sf",{"_index":620,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["stacks",{"_index":617,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["stackstring",{"_index":619,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["stacktrace",{"_index":591,"title":{},"body":{"injectables/RemoteLoggingService.html":{},"dependencies.html":{}}}],["stacktrace.fromerror(error).then(stackframes",{"_index":618,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["standard",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseClientService.html":{},"injectables/RemoteLoggingService.html":{}}}],["start",{"_index":680,"title":{},"body":{"miscellaneous/functions.html":{}}}],["startapp",{"_index":649,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["startapp(config",{"_index":679,"title":{},"body":{"miscellaneous/functions.html":{}}}],["started",{"_index":683,"title":{"index.html":{}},"body":{}}],["startup",{"_index":678,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":408,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["staticprovider",{"_index":435,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["stored",{"_index":701,"title":{},"body":{"index.html":{}}}],["str",{"_index":120,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["str.replace(new",{"_index":131,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["string",{"_index":29,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{}}}],["strip",{"_index":476,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["styles",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurls",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe(success",{"_index":603,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["super(config",{"_index":265,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["support",{"_index":458,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"modules.html":{}}}],["supported",{"_index":416,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["supportedlangs",{"_index":410,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["supports",{"_index":540,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["svg",{"_index":723,"title":{},"body":{"modules.html":{}}}],["system",{"_index":352,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["table",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["templateurl",{"_index":70,"title":{},"body":{"components/AppComponent.html":{}}}],["test",{"_index":710,"title":{},"body":{"index.html":{}}}],["testing",{"_index":322,"title":{},"body":{"interfaces/Error.html":{}}}],["tests",{"_index":709,"title":{},"body":{"index.html":{}}}],["this._rooturl",{"_index":314,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["this.config.getconfig('api",{"_index":45,"title":{},"body":{"injectables/ApiConfigService.html":{}}}],["this.config.rooturl",{"_index":315,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["this.configdata",{"_index":128,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.configdata.environment",{"_index":135,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.configdata[key",{"_index":134,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.getalluserlanguages().foreach((v",{"_index":467,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["this.getcurrentlanguage",{"_index":463,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["this.geturl",{"_index":611,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["this.http.delete(url",{"_index":275,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["this.http.get(this.rooturl",{"_index":266,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["this.http.post(`${this.rooturl}/v1/error",{"_index":602,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["this.http.post(url",{"_index":274,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["this.http.put(url",{"_index":273,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["this.injector.get(locationstrategy",{"_index":629,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["this.log('error",{"_index":626,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["this.log(message",{"_index":622,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["this.logger.logerror(err",{"_index":451,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["this.logger.logerror(httperr",{"_index":383,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["this.newparams",{"_index":268,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["this.posttoserver(message",{"_index":606,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["this.redirecttologout",{"_index":366,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["this.rooturl",{"_index":46,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/RemoteLoggingService.html":{}}}],["this.supportedlangs",{"_index":447,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["this.supportedlangs.get(lang",{"_index":502,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["this.title",{"_index":84,"title":{},"body":{"components/AppComponent.html":{}}}],["throwerror",{"_index":355,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["throwerror(httperr",{"_index":384,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["time",{"_index":324,"title":{},"body":{"interfaces/Error.html":{}}}],["title",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["todo",{"_index":385,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/RemoteLoggingService.html":{}}}],["trace",{"_index":613,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["translations",{"_index":437,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["translations_format",{"_index":438,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["tree",{"_index":60,"title":{},"body":{"components/AppComponent.html":{}}}],["tresponsemodel",{"_index":214,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["true",{"_index":623,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["try",{"_index":443,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"injectables/RemoteLoggingService.html":{}}}],["tslib",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":26,"title":{},"body":{"injectables/ApiConfigService.html":{},"components/AppComponent.html":{},"injectables/AppConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"interfaces/Error.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"coverage.html":{}}}],["uls",{"_index":495,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["unauthenticated",{"_index":362,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["undefined",{"_index":496,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["unit",{"_index":708,"title":{},"body":{"index.html":{}}}],["unsuccessful",{"_index":373,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["updated",{"_index":250,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["url",{"_index":31,"title":{},"body":{"injectables/ApiConfigService.html":{},"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{},"injectables/RemoteLoggingService.html":{},"miscellaneous/functions.html":{}}}],["use",{"_index":110,"title":{},"body":{"injectables/AppConfigService.html":{},"index.html":{}}}],["useclass",{"_index":531,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["used",{"_index":187,"title":{},"body":{"injectables/BaseClientService.html":{},"interfaces/Error.html":{}}}],["user",{"_index":360,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{},"injectables/LanguageDetectionService.html":{},"miscellaneous/functions.html":{}}}],["user's",{"_index":398,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["userlangs",{"_index":465,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["userlangs.findindex(existing",{"_index":471,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["userlangs.push(lang",{"_index":489,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["userlangs.push(v",{"_index":474,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["userlangs.reduce(findbestmatch",{"_index":523,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["usevalue",{"_index":548,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["v",{"_index":487,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["v.split",{"_index":484,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["v.startswith(`${lang",{"_index":518,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["v1/reports_recent",{"_index":233,"title":{},"body":{"injectables/BaseClientService.html":{}}}],["value",{"_index":218,"title":{},"body":{"injectables/BaseClientService.html":{},"injectables/BaseService.html":{},"injectables/LanguageDetectionService.html":{},"classes/ParameterCodec.html":{}}}],["values",{"_index":297,"title":{},"body":{"injectables/BaseService.html":{},"classes/ParameterCodec.html":{}}}],["var",{"_index":97,"title":{},"body":{"components/AppComponent.html":{}}}],["variable",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":728,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":688,"title":{},"body":{"index.html":{}}}],["via",{"_index":712,"title":{},"body":{"index.html":{}}}],["view",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"injectables/HttpErrorHandlerService.html":{}}}],["void",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseService.html":{},"injectables/HttpErrorHandlerService.html":{},"injectables/RemoteLoggingService.html":{}}}],["we're",{"_index":499,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["webpack's",{"_index":440,"title":{},"body":{"injectables/LanguageDetectionService.html":{},"miscellaneous/variables.html":{}}}],["welcome",{"_index":86,"title":{},"body":{"components/AppComponent.html":{}}}],["went",{"_index":377,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["window.location.assign(window.location.origin",{"_index":391,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["window.location.search.length",{"_index":553,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["window.location.search.substr(6",{"_index":555,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["window.location.tostring",{"_index":631,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["window.navigator.language",{"_index":454,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["window.navigator.languages",{"_index":459,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["window.navigator.languages.slice(1",{"_index":456,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["wrong",{"_index":378,"title":{},"body":{"injectables/HttpErrorHandlerService.html":{}}}],["xlf",{"_index":549,"title":{},"body":{"injectables/LanguageDetectionService.html":{}}}],["yes",{"_index":583,"title":{},"body":{"injectables/RemoteLoggingService.html":{}}}],["zone.js",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ApiConfigService.html":{"url":"injectables/ApiConfigService.html","title":"injectable - ApiConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ApiConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/api-config.service.ts\n        \n\n            \n                Description\n            \n            \n                Gets the global API services configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rootUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AppConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/api-config.service.ts:14\n                            \n                        \n\n                \n                    \n                            Initialize the rootURL\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AppConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/api-config.service.ts:14\n                            \n                        \n\n                \n                    \n                        Root URL for API operations \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { AppConfigService } from './app-config.service';\n\n/**\n * Gets the global API services configuration\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiConfigService {\n\n  /** Root URL for API operations */\n  rootUrl: string;\n\n  /**\n   * Initialize the rootURL\n   */\n  constructor(private config: AppConfigService) {\n    const apiConfig: {[key: string]: string | number }  = this.config.getConfig('api');\n    this.rootUrl = apiConfig.protocol + '://' + apiConfig.host + ':' + apiConfig.port + apiConfig.base_url;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        Base application component \n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:11\n                            \n                        \n\n                \n                    \n                            standard base constructor \n\n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:17\n                \n            \n\n\n            \n                \n                    Get cards for display and set view title \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:11\n                            \n                        \n\n                \n                    \n                        title of the view \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n/** Base application component */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  /** title of the view */\n  title: string;\n\n  /** standard base constructor */\n  constructor() { }\n\n  /** Get cards for display and set view title */\n  ngOnInit() {\n    this.title = 'Angular App';\n  }\n}\n\n    \n\n    \n        \n  \n    Welcome To New {{ title }}!\n  \n  \n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                @import '../sass/cartus-palette.scss';\n\n.container {\n    padding: 15px;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Welcome To New {{ title }}!    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppConfigService.html":{"url":"injectables/AppConfigService.html","title":"injectable - AppConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/app-config.service.ts\n        \n\n            \n                Description\n            \n            \n                Gets the global application configuration data\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                configData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getConfig\n                            \n                            \n                                    Public\n                                getEnv\n                            \n                            \n                                replaceString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/app-config.service.ts:14\n                            \n                        \n\n                \n                    \n                            Initialize application config data\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getConfig\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getConfig(key: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/app-config.service.ts:34\n                \n            \n\n\n            \n                \n                    Use to get the data found in the second file (config file)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEnv\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEnv()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/app-config.service.ts:41\n                \n            \n\n\n            \n                \n                    Use to get the environment name\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            replaceString\n                        \n                        \n                    \n                \n            \n            \n                \nreplaceString(str, search, replacement)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/app-config.service.ts:27\n                \n            \n\n\n            \n                \n                    Use for in-string replacement of search with replacement in str\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    str\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    search\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replacement\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/app-config.service.ts:14\n                            \n                        \n\n                \n                    \n                        Application config data\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\n\n/**\n * Gets the global application configuration data\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppConfigService {\n\n  /**\n   * Application config data\n   */\n  configData: any;\n\n  /**\n   * Initialize application config data\n   */\n  constructor(@Inject('appConfig') private config) {\n    const configStr = JSON.stringify(config, null, 2);\n    this.configData = JSON.parse(configStr);\n  }\n\n  /**\n   * Use for in-string replacement of search with replacement in str\n   */\n  replaceString(str, search, replacement) {\n    return str.replace(new RegExp(search, 'g'), replacement);\n  }\n\n  /**\n   * Use to get the data found in the second file (config file)\n   */\n  public getConfig(key: any): {} {\n    return this.configData[key];\n  }\n\n  /**\n   * Use to get the environment name\n   */\n  public getEnv(): string {\n    return this.configData.environment || 'dev';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { MatToolbarModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatOptionModule,\n  MatSelectModule,\n  MatIconModule,\n  MatButtonModule,\n  MatCardModule,\n  MatTableModule,\n  MatDividerModule,\n  MatSnackBarModule } from '@angular/material';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    MatToolbarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCardModule,\n    MatTableModule,\n    MatDividerModule,\n    MatSnackBarModule,\n    FlexLayoutModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseClientService.html":{"url":"injectables/BaseClientService.html","title":"injectable - BaseClientService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BaseClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/base-client.service.ts\n        \n\n            \n                Description\n            \n            \n                Used to make generic standard API calls.  The base URL for the service calls is based on the configuration.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                post\n                            \n                            \n                                put\n                            \n                            \n                                    Protected\n                                newParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiConfigService, http: HttpClient, errorHandler: HttpErrorHandlerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/base-client.service.ts:15\n                            \n                        \n\n                \n                    \n                            base constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                API Config service injector\n\n                                                        \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HTTP Client injector\n\n                                                        \n                                                \n                                                \n                                                        errorHandler\n                                                  \n                                                        \n                                                                        HttpErrorHandlerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HTTP error handler injector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(route: string, action: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-client.service.ts:76\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TResponseModel\n                    \n                \n            \n\n            \n                \n                    Run a DELETE API call\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The endpoint for the delete request\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'error delete request'\n                                    \n\n                                    \n                                        The action that is performing the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        A response containing the expected result\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(route: string, action: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-client.service.ts:42\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TResponseModel\n                    \n                \n            \n\n            \n                \n                    Run a GET API call, expectiing a response with an array of the expected model\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The endpoint for the request (ie. - '/v1/reports_recent')\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'error executing requests'\n                                    \n\n                                    \n                                        The action that is performing the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>>\n\n                    \n                    \n                        A response containing the expected models (array)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(route: string, action: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-client.service.ts:32\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TResponseModel\n                    \n                \n            \n\n            \n                \n                    Run a GET API call, expecting a response with a single model\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The endpoint for the request (ie. - '/v1/reports_recent')\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'error executing requests'\n                                    \n\n                                    \n                                        The action that is performing the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        A response containing the expected model (single)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            post\n                        \n                        \n                    \n                \n            \n            \n                \npost(route: string, body: any, action: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-client.service.ts:65\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TResponseModel\n                    \n                \n            \n\n            \n                \n                    Run a POST API call\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The endpoint for the request (ie. - '/v1/reports_recent')\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The object that is being posted\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'error posting request'\n                                    \n\n                                    \n                                        The action that is performing the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        A response containing the expected result (single)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            put\n                        \n                        \n                    \n                \n            \n            \n                \nput(route: string, body: any, action: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-client.service.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        TResponseModel\n                    \n                \n            \n\n            \n                \n                    Run a PUT API call\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The endpoint for the request (ie. - '/v1/reports_recent')\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The object that is being updated\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'error putting request'\n                                    \n\n                                    \n                                        The action that is performing the request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        A response containing the expected result (single)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            newParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newParams()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:73\n\n                \n            \n\n\n            \n                \n                    Creates a new HttpParams with the correct codec\n\n\n                    \n                        Returns :         HttpParams\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseService\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseService:53\n\n                            \n                        \n\n                \n                    \n                        The root URL for API operations\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from './base-service';\nimport { ApiConfigService } from './api-config.service';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandlerService } from './http-error-handler.service';\n\n/**\n * Used to make generic standard API calls.  The base URL for the service calls is based on the configuration.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseClientService extends BaseService  {\n\n  /**\n   * base constructor\n   * @param config API Config service injector\n   * @param http HTTP Client injector\n   * @param errorHandler HTTP error handler injector\n   */\n  constructor(config: ApiConfigService, http: HttpClient, private errorHandler: HttpErrorHandlerService) {\n    super(config, http);\n  }\n\n  /** Run a GET API call, expecting a response with a single model\n   * @param route The endpoint for the request (ie. - '/v1/reports_recent')\n   * @param action The action that is performing the request\n   * @return A response containing the expected model (single)\n   */\n  getById(route: string, action: string = 'error executing requests'): Observable> {\n    return this.http.get(this.rootUrl + route, { params: this.newParams(), observe: 'response', responseType: 'json' })\n    .pipe(catchError(this.errorHandler.handleHttpErrorResponse(action)));\n  }\n\n  /** Run a GET API call, expectiing a response with an array of the expected model\n   * @param route The endpoint for the request (ie. - '/v1/reports_recent')\n   * @param action The action that is performing the request\n   * @return A response containing the expected models (array)\n   */\n  get(route: string, action: string = 'error executing requests'): Observable>> {\n    return this.http.get(this.rootUrl + route, { params: this.newParams(), observe: 'response', responseType: 'json' })\n    .pipe(catchError(this.errorHandler.handleHttpErrorResponse(action)));\n  }\n\n  /** Run a PUT API call\n   * @param route The endpoint for the request (ie. - '/v1/reports_recent')\n   * @param body The object that is being updated\n   * @param action The action that is performing the request\n   * @return A response containing the expected result (single)\n   */\n  put(route: string, body: any, action: string = 'error putting request'): Observable> {\n    const url = this.rootUrl + route;\n    return this.http.put(url, body, { params: this.newParams(), observe: 'response', responseType: 'json' })\n        .pipe(catchError(this.errorHandler.handleHttpErrorResponse(action)));\n  }\n\n  /** Run a POST API call\n   * @param route The endpoint for the request (ie. - '/v1/reports_recent')\n   * @param body The object that is being posted\n   * @param action The action that is performing the request\n   * @return A response containing the expected result (single)\n   */\n  post(route: string, body: any, action: string = 'error posting request'): Observable> {\n    const url = this.rootUrl + route;\n    return this.http.post(url, body, { params: this.newParams(), observe: 'response', responseType: 'json' })\n      .pipe(catchError(this.errorHandler.handleHttpErrorResponse(action)));\n  }\n\n  /** Run a DELETE API call\n   * @param route The endpoint for the delete request\n   * @param action The action that is performing the request\n   * @return A response containing the expected result\n   */\n  delete(route: string, action: string = 'error delete request'): Observable> {\n    const url = this.rootUrl + route;\n    return this.http.delete(url, { params: this.newParams(), observe: 'response', responseType: 'json' })\n      .pipe(catchError(this.errorHandler.handleHttpErrorResponse(action)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseService.html":{"url":"injectables/BaseService.html","title":"injectable - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/base-service.ts\n        \n\n            \n                Description\n            \n            \n                Gets config data for API services\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                newParams\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    rootUrl\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiConfigService, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/base-service.ts:40\n                            \n                        \n\n                \n                    \n                            base constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                API Config Service injection\n\n                                                        \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HTTP Client injection\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            newParams\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newParams()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-service.ts:73\n                \n            \n\n\n            \n                \n                    Creates a new HttpParams with the correct codec\n\n\n                    \n                        Returns :         HttpParams\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/base-service.ts:53\n                            \n                        \n\n                \n                    \n                        The root URL for API operations\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        rootUrl\n                    \n                \n\n                \n                    \n                        getrootUrl()\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/services/base-service.ts:59\n                                \n                            \n                    \n                        \n                                Returns the root url for API operations. If not set directly in this\nservice, will fallback to ApiConfiguration.rootUrl.\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n                \n                    \n                        setrootUrl(rootUrl: string)\n                    \n                \n                            \n                                \n                                    Defined in src/app/core/services/base-service.ts:66\n                                \n                            \n                    \n                        \n                                Sets the root URL for API operations in this service.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            rootUrl\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParameterCodec, HttpParams } from '@angular/common/http';\nimport { ApiConfigService } from './api-config.service';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  /** URL encode a key */\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  /** URL encode a value */\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  /** URL decode a key */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /** URL decode a value */\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n/** @ignore */\nconst PARAMETER_CODEC = new ParameterCodec();\n\n/**\n * Gets config data for API services\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseService {\n\n  /**\n   * base constructor \n   * @param config API Config Service injection\n   * @param http HTTP Client injection\n   */\n  constructor(protected config: ApiConfigService, protected http: HttpClient) {\n  }\n\n  /**\n   * The root URL for API operations\n   */\n  private _rootUrl: string;\n\n  /**\n   * Returns the root url for API operations. If not set directly in this\n   * service, will fallback to ApiConfiguration.rootUrl.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n\n  /**\n   * Creates a new `HttpParams` with the correct codec\n   */\n  protected newParams(): HttpParams {\n    return new HttpParams({\n      encoder: PARAMETER_CODEC\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Error.html":{"url":"interfaces/Error.html","title":"interface - Error","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Error\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/error.model.ts\n        \n\n            \n                Description\n            \n            \n                Model for errors.  Used for testing the http error handler service.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        message\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        properties\n                                \n                                \n                                            Optional\n                                        time\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    default messages\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    error name used as a key into localization files\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        properties\n                                    \n                                \n                                \n                                    \n                                        properties:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    parameters for populating the error messages\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                    \n                                \n                                \n                                    \n                                        time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    time the error occured on the server\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Error {\n\n    /**\n     * time the error occured on the server\n     */\n    time?: string;\n  \n    /**\n     * default messages\n     */\n    message?: string;\n  \n    /**\n     * error name used as a key into localization files\n     */\n    name?: string;\n  \n    /**\n     * parameters for populating the error messages\n     */\n    properties?: Array;\n  }\n  \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpErrorHandlerService.html":{"url":"injectables/HttpErrorHandlerService.html","title":"injectable - HttpErrorHandlerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HttpErrorHandlerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/http-error-handler.service.ts\n        \n\n            \n                Description\n            \n            \n                HTTP response error handler.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleHttpErrorResponse\n                            \n                            \n                                redirectToLogout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: RemoteLoggingService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/http-error-handler.service.ts:11\n                            \n                        \n\n                \n                    \n                            base constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        RemoteLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                remote logger service injector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleHttpErrorResponse\n                        \n                        \n                    \n                \n            \n            \n                \nhandleHttpErrorResponse(actionName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/http-error-handler.service.ts:23\n                \n            \n\n\n            \n                \n                    Handle Http response error.  redirecting to logout on occasion or just logging the error with the remote logging service.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    actionName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        method/action from which the error occurred\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     (error: any, caught: any) => any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            redirectToLogout\n                        \n                        \n                    \n                \n            \n            \n                \nredirectToLogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/http-error-handler.service.ts:49\n                \n            \n\n\n            \n                \n                    redirects the system to the logout page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ObservableInput, throwError } from 'rxjs';\nimport { RemoteLoggingService } from './remote-logging.service';\n\n/**\n * HTTP response error handler.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpErrorHandlerService {\n\n  /**\n   * base constructor\n   * @param logger remote logger service injector\n   */\n  constructor(private logger: RemoteLoggingService) { }\n\n  /**\n   * Handle Http response error.  redirecting to logout on occasion or just logging the error with the remote logging service.\n   * @param actionName method/action from which the error occurred\n   */\n  handleHttpErrorResponse(actionName: string) {\n    return (error: any, caught: any): ObservableInput | ObservableInput => {\n      let errorMsg = '';\n\n      if (error.status === 401) {\n        errorMsg = 'While ' + actionName + ' user was noted as unauthenticated and logged out of the system. ' +  error.error.message;\n        console.warn('While ' + actionName + ' user was noted as unauthenticated and logged out of the system', error.error.message);\n        this.redirectToLogout();\n      } else if (error.error && error.error.message) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMsg = 'An error occurred while ' + actionName + ': ' + error.error.message;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMsg = `Backend returned code ${error.status}, body was: ${JSON.stringify(error.error)}`;\n      }\n      // return an observable with a user-facing error message\n      const httpErr = new Error(errorMsg);\n      this.logger.logError(httpErr);\n      return throwError(httpErr);\n    };\n  }\n\n  /**\n   * redirects the system to the logout page\n   */\n  redirectToLogout() {\n    // TODO: maybe - change logout URL to something other than the COL logout view\n    setTimeout(() => window.location.assign(window.location.origin + '/resp/Public#/logout?code=4'), 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LanguageDetectionService.html":{"url":"injectables/LanguageDetectionService.html","title":"injectable - LanguageDetectionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LanguageDetectionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/language-detection.service.ts\n        \n\n            \n                Description\n            \n            \n                Detects the user's language configuration from the browser\nand can compare against the list of localized languages,\nreturning the closest match.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DefaultLanguage\n                            \n                            \n                                SupportedLangs\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllUserLanguages\n                            \n                            \n                                getAlternateUserLanguages\n                            \n                            \n                                getCurrentLanguage\n                            \n                            \n                                getUserLanguage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: RemoteLoggingService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/language-detection.service.ts:26\n                            \n                        \n\n                \n                    \n                            initialize the supported languages\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        RemoteLoggingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllUserLanguages\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllUserLanguages()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/language-detection.service.ts:58\n                \n            \n\n\n            \n                \n                    Returns all configured languages besides the current language.\n\n\n                    \n                        Returns :     ReadonlyArray\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAlternateUserLanguages\n                        \n                        \n                    \n                \n            \n            \n                \ngetAlternateUserLanguages()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/language-detection.service.ts:51\n                \n            \n\n\n            \n                \n                    Returns all configured languages besides the current language.\n\n\n                    \n                        Returns :     ReadonlyArray\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentLanguage\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentLanguage()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/language-detection.service.ts:44\n                \n            \n\n\n            \n                \n                    Returns the current language the user has selected in their browser.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserLanguage\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserLanguage()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/language-detection.service.ts:67\n                \n            \n\n\n            \n                \n                    Finds the supported language that most closely matches the user's preferred language.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DefaultLanguage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'en-US'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/language-detection.service.ts:20\n                            \n                        \n\n                \n                    \n                        The application's default language.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SupportedLangs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/language-detection.service.ts:26\n                            \n                        \n\n                \n                    \n                        The languages supported by this application\nas defined in the index src/locale/langs.json.\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Injector, StaticProvider, LOCALE_ID, TRANSLATIONS, TRANSLATIONS_FORMAT } from '@angular/core';\nimport { RemoteLoggingService } from './remote-logging.service';\n\n/** Grab a handle to webpack's `require` */\ndeclare const require;\n\n/**\n * Detects the user's language configuration from the browser\n * and can compare against the list of localized languages,\n * returning the closest match.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageDetectionService {\n  /**\n   * The application's default language.\n   */\n  public static DefaultLanguage = 'en-US';\n\n  /**\n   * The languages supported by this application\n   * as defined in the index `src/locale/langs.json`.\n   */\n  SupportedLangs: Map;\n\n  /**\n   * initialize the supported languages\n   */\n  constructor(private logger: RemoteLoggingService) {\n    try {\n      const langs: Iterable = require('../../../locale/langs.json');\n      this.SupportedLangs = new Map(langs);\n    } catch (err) {\n      this.logger.logError(err);\n      this.SupportedLangs = new Map([['en', ['en-US']]]); // Fallback to just the default lang.\n    }\n  }\n\n  /**\n   * Returns the current language the user has selected in their browser.\n   */\n  getCurrentLanguage(): string {\n    return window.navigator.language;\n  }\n\n  /**\n   * Returns all configured languages _besides_ the current language.\n   */\n  getAlternateUserLanguages(): ReadonlyArray {\n    return window.navigator.languages.slice(1);\n  }\n\n  /**\n   * Returns all configured languages _besides_ the current language.\n   */\n  getAllUserLanguages(): ReadonlyArray {\n    // IE doesn't support window.navigator.languages nor any graceful fallback, so manually handle it\n    const langs: ReadonlyArray = window.navigator.languages ? window.navigator.languages : ['en-US', 'en'];\n    return langs;\n  }\n\n  /**\n   * Finds the supported language that most closely matches the user's preferred language.\n   */\n  getUserLanguage(): string {\n    const preferredLang = this.getCurrentLanguage();\n\n    if (preferredLang === LanguageDetectionService.DefaultLanguage) {\n      return preferredLang;\n    }\n\n    const userLangs: string[] = [];\n\n    // Expand all user languages.\n    this.getAllUserLanguages().forEach((v, i, a) => {\n      // Add this language as is, avoiding duplicates\n      if (userLangs.findIndex(existing => existing === lang) === -1) {\n        userLangs.push(v);\n      }\n\n      // Now strip down to the country-less language (e.g. 'es_US' => 'es').\n      const parts = v.split('-');\n      const lang = parts[0];\n\n      // Avoid duplicates\n      if (lang === v) {\n        return;\n      }\n      // Avoid duplicates\n      if (userLangs.findIndex(existing => existing === lang) >= 0) {\n        return;\n      }\n      userLangs.push(lang);\n    });\n\n    // Find the first user language to intersect with the list of supported langs.\n    const findIntersection = (previous: string, current: string, index: Number, uls: string[]): string => {\n      if (previous !== undefined) {\n        return previous;\n      }\n    };\n\n    // Find the closest match.\n    const findBestMatch = (previous: string, current: string, index: Number, uls: string[]): string => {\n      // If we already had a match then we're done, so just return that.\n      if (previous !== null) {\n        return previous;\n      }\n\n      const parts = current.split('-');\n      const lang = parts[0];\n\n      let langs = this.SupportedLangs.get(lang);\n\n      // This really shouldn't happen since langs.json is an inverted index,\n      // but someone may have made an innocent mistake. Do our best to move on.\n      if (langs === undefined || langs === null || langs.length === 0) {\n        langs = [ lang ]; // e.g. just plain 'es'\n      }\n\n      return langs.indexOf(current) >= 0\n        ? current\n        : (() => {\n          const i = langs.findIndex((v) => v.startsWith(`${lang}-`));\n          return i >= 0 ? langs[i] : null;\n        })();\n      };\n    // Propagate nulls so we can fallback to the default if no\n    // good matches are found.\n    return userLangs.reduce(findBestMatch, null) || LanguageDetectionService.DefaultLanguage;\n  }\n}\n\n/** Gets the supported language based on the browser language setting, if possible, or returns the default language (US-en) */\nexport function DetectSupportedUserLanguage() {\n  const injector = Injector.create([{ deps: [ Injector ], provide: RemoteLoggingService, useClass: RemoteLoggingService }]);\n  const lds = new LanguageDetectionService(injector.get(RemoteLoggingService));\n  return lds.getUserLanguage();\n}\n\n/** Returns locale providers if the detected user langauge (based on browser settings) is a language the site supports */\nexport function MaybeLoadLocaleProviders(logger: RemoteLoggingService) {\n  let localeProviders: StaticProvider[] = null;\n  const currentLocale = DetectSupportedUserLanguage();\n  if (currentLocale !== LanguageDetectionService.DefaultLanguage) {\n    // Load our language file for any non-default locale.\n    try {\n      const translations = require(`raw-loader!../../../locale/messages.${currentLocale}.xlf`);\n      localeProviders = [\n        { provide: LOCALE_ID, useValue: currentLocale },\n        { provide: TRANSLATIONS, useValue: translations },\n        { provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }\n      ];\n    } catch (err) {\n      logger.logError(err);\n    }\n  }\n  return localeProviders;\n}\n\n/** Returns locale providers if the user langauge (based on the current URL or browser setteing) is a language the site supports */\nexport function MaybeLoadLocaleProvidersFromQuerymap(logger: RemoteLoggingService) {\n  let localeProviders: StaticProvider[] = null;\n  const currentLocale = window.location.search.length > 5 ? window.location.search.substr(6) : DetectSupportedUserLanguage();\n  if (currentLocale !== LanguageDetectionService.DefaultLanguage) {\n    // Load our language file for any non-default locale.\n    try {\n      const translations = require(`raw-loader!../../../locale/messages.${currentLocale}.xlf`);\n      localeProviders = [\n        { provide: LOCALE_ID, useValue: currentLocale },\n        { provide: TRANSLATIONS, useValue: translations },\n        { provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }\n      ];\n    } catch (err) {\n      logger.logError(err);\n    }\n  }\n  return localeProviders;\n}\n\n/** Gets all site supported languages */\nexport function GetAllSupportedLanguages(): string[] {\n  const langs = [];\n\n  const injector = Injector.create([{ deps: [ Injector ], provide: RemoteLoggingService, useClass: RemoteLoggingService }]);\n  const lds = new LanguageDetectionService(injector.get(RemoteLoggingService));\n\n  lds.SupportedLangs.forEach(v => langs.push(...v));\n  return langs;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParameterCodec.html":{"url":"classes/ParameterCodec.html","title":"class - ParameterCodec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParameterCodec\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/base-service.ts\n        \n\n            \n                Description\n            \n            \n                Custom parameter codec to correctly handle the plus sign in parameter\nvalues. See https://github.com/angular/angular/issues/18261\n\n            \n\n\n            \n                Implements\n            \n            \n                            HttpParameterCodec\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeKey\n                            \n                            \n                                decodeValue\n                            \n                            \n                                encodeKey\n                            \n                            \n                                encodeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decodeKey\n                        \n                        \n                    \n                \n            \n            \n                \ndecodeKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-service.ts:22\n                \n            \n\n\n            \n                \n                    URL decode a key \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decodeValue\n                        \n                        \n                    \n                \n            \n            \n                \ndecodeValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-service.ts:27\n                \n            \n\n\n            \n                \n                    URL decode a value \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encodeKey\n                        \n                        \n                    \n                \n            \n            \n                \nencodeKey(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-service.ts:12\n                \n            \n\n\n            \n                \n                    URL encode a key \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encodeValue\n                        \n                        \n                    \n                \n            \n            \n                \nencodeValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/base-service.ts:17\n                \n            \n\n\n            \n                \n                    URL encode a value \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParameterCodec, HttpParams } from '@angular/common/http';\nimport { ApiConfigService } from './api-config.service';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  /** URL encode a key */\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  /** URL encode a value */\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  /** URL decode a key */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /** URL decode a value */\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n/** @ignore */\nconst PARAMETER_CODEC = new ParameterCodec();\n\n/**\n * Gets config data for API services\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseService {\n\n  /**\n   * base constructor \n   * @param config API Config Service injection\n   * @param http HTTP Client injection\n   */\n  constructor(protected config: ApiConfigService, protected http: HttpClient) {\n  }\n\n  /**\n   * The root URL for API operations\n   */\n  private _rootUrl: string;\n\n  /**\n   * Returns the root url for API operations. If not set directly in this\n   * service, will fallback to ApiConfiguration.rootUrl.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n\n  /**\n   * Creates a new `HttpParams` with the correct codec\n   */\n  protected newParams(): HttpParams {\n    return new HttpParams({\n      encoder: PARAMETER_CODEC\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RemoteLoggingService.html":{"url":"injectables/RemoteLoggingService.html","title":"injectable - RemoteLoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RemoteLoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/remote-logging.service.ts\n        \n\n            \n                Description\n            \n            \n                remote logging service for sending errors to API for standard logging solution\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getUrl\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                logError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(injector: Injector, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/remote-logging.service.ts:14\n                            \n                        \n\n                \n                    \n                            initialize root URL\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        injector\n                                                  \n                                                        \n                                                                        Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                base injector\n\n                                                        \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HTTP Client injector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getUrl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUrl()\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/remote-logging.service.ts:78\n                \n            \n\n\n            \n                \n                    gets the current URL \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            log\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, url?: string, stack?: string, isError?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/remote-logging.service.ts:41\n                \n            \n\n\n            \n                \n                    log a message\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the message\n\n                                    \n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the URL, if available\n\n                                    \n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the callstack, if available\n\n                                    \n                                \n                                \n                                    isError\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        is the message an error\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            logError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logError(error: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/core/services/remote-logging.service.ts:57\n                \n            \n\n\n            \n                \n                    log an error\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the error that occurred\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/core/services/remote-logging.service.ts:14\n                            \n                        \n\n                \n                    \n                        root URL for API calls \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Injector } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport * as StackTrace from 'stacktrace-js';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\n/**\n * remote logging service for sending errors to API for standard logging solution\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class RemoteLoggingService {\n  /** root URL for API calls */\n  rootUrl: string;\n\n  /**\n   * initialize root URL\n   * @param injector base injector\n   * @param http HTTP Client injector\n   */\n  constructor(private injector: Injector, private http: HttpClient) {\n    // TODO: set root URL to correct URL for logging service\n    this.rootUrl = '/api';\n  }\n\n  // TODO: bring back postToServer once we have an API to call for logging\n  // private postToServer(message: string, url?: string, stack?: string, isError?: boolean) {\n  //   const error =  { message: message, url: url, stack: stack, isError: isError };\n  //   const headers = new HttpHeaders({'Content-Type': 'application/json'});\n  //   this.http.post(`${this.rootUrl}/v1/error`, error, { headers: headers })\n  //     .subscribe(success => {}, err => { console.log(`LOGGER ERROR: ${err}`); });\n  // }\n\n  /**\n   * log a message\n   * @param message the message\n   * @param url the URL, if available\n   * @param stack the callstack, if available\n   * @param isError is the message an error\n   */\n  public log(message: string, url?: string, stack?: string, isError?: boolean) {\n    // if (false) {\n    //   this.postToServer(message, url, stack, isError);\n    // }\n\n    if (isError) {\n      console.error('Logged to server - message: ' + message + '  URL: ' +  url + '  stack: ' + stack);\n    } else {\n      console.log('Logged to server - message: ' + message + '  URL: ' +  url + '  stack: ' + stack);\n    }\n  }\n\n  /**\n   * log an error\n   * @param error the error that occurred\n   */\n  public logError(error: any) {\n    try {\n      const message = error.message ? error.message : error.toString();\n      const url = this.getUrl();\n\n      if (error instanceof Error) {\n        // get the stack trace, lets grab the last 10 stacks only\n        StackTrace.fromError(error).then(stackFrames => {\n          // log on the server\n          const stackString = stackFrames.map(sf => sf.toString()).join('\\n');\n          this.log(message, url, stackString, true);\n        });\n      } else {\n        this.log(message, url, 'N/A', true);\n      }\n    } catch (e) {\n      this.log('Error while parsing error: ' + error, '', 'N/A', true);\n    }\n  }\n\n  /** gets the current URL */\n  private getUrl() {\n    const location = this.injector.get(LocationStrategy);\n    const url = location instanceof HashLocationStrategy\n      ? (location).path(true) || window.location.toString()\n      : window.location.toString();\n    return url;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/models/error.model.ts\n            \n            interface\n            Error\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/core/services/api-config.service.ts\n            \n            injectable\n            ApiConfigService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/core/services/app-config.service.ts\n            \n            injectable\n            AppConfigService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/core/services/base-client.service.ts\n            \n            injectable\n            BaseClientService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/app/core/services/base-service.ts\n            \n            class\n            ParameterCodec\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/core/services/base-service.ts\n            \n            injectable\n            BaseService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/services/http-error-handler.service.ts\n            \n            injectable\n            HttpErrorHandlerService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/services/language-detection.service.ts\n            \n            injectable\n            LanguageDetectionService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/core/services/language-detection.service.ts\n            \n            function\n            DetectSupportedUserLanguage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/services/language-detection.service.ts\n            \n            function\n            GetAllSupportedLanguages\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/services/language-detection.service.ts\n            \n            function\n            MaybeLoadLocaleProviders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/services/language-detection.service.ts\n            \n            function\n            MaybeLoadLocaleProvidersFromQuerymap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/services/language-detection.service.ts\n            \n            variable\n            require\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/services/remote-logging.service.ts\n            \n            injectable\n            RemoteLoggingService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            loadConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            startApp\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^7.2.6\n        \n            @angular/cdk : ^7.3.4\n        \n            @angular/common : ~7.2.0\n        \n            @angular/compiler : ~7.2.0\n        \n            @angular/core : ~7.2.0\n        \n            @angular/flex-layout : ^7.0.0-beta.23\n        \n            @angular/forms : ~7.2.0\n        \n            @angular/material : ^7.3.3\n        \n            @angular/platform-browser : ~7.2.0\n        \n            @angular/platform-browser-dynamic : ~7.2.0\n        \n            @angular/router : ~7.2.0\n        \n            classlist.js : ^1.1.20150312\n        \n            core-js : ^2.5.4\n        \n            rxjs : ~6.3.3\n        \n            stacktrace-js : ^2.0.0\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.8.26\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DetectSupportedUserLanguage   (src/.../language-detection.service.ts)\n                        \n                        \n                            GetAllSupportedLanguages   (src/.../language-detection.service.ts)\n                        \n                        \n                            loadConfig   (src/.../main.ts)\n                        \n                        \n                            MaybeLoadLocaleProviders   (src/.../language-detection.service.ts)\n                        \n                        \n                            MaybeLoadLocaleProvidersFromQuerymap   (src/.../language-detection.service.ts)\n                        \n                        \n                            startApp   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/services/language-detection.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            DetectSupportedUserLanguage\n                        \n                        \n                    \n                \n            \n            \n                \nDetectSupportedUserLanguage()\n                \n            \n\n\n\n\n            \n                \n                    Gets the supported language based on the browser language setting, if possible, or returns the default language (US-en) \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            GetAllSupportedLanguages\n                        \n                        \n                    \n                \n            \n            \n                \nGetAllSupportedLanguages()\n                \n            \n\n\n\n\n            \n                \n                    Gets all site supported languages \n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            MaybeLoadLocaleProviders\n                        \n                        \n                    \n                \n            \n            \n                \nMaybeLoadLocaleProviders(logger)\n                \n            \n\n\n\n\n            \n                \n                    Returns locale providers if the detected user langauge (based on browser settings) is a language the site supports \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            MaybeLoadLocaleProvidersFromQuerymap\n                        \n                        \n                    \n                \n            \n            \n                \nMaybeLoadLocaleProvidersFromQuerymap(logger)\n                \n            \n\n\n\n\n            \n                \n                    Returns locale providers if the user langauge (based on the current URL or browser setteing) is a language the site supports \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            loadConfig\n                        \n                        \n                    \n                \n            \n            \n                \nloadConfig()\n                \n            \n\n\n\n\n            \n                \n                    load configuration and startup the application \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startApp\n                        \n                        \n                    \n                \n            \n            \n                \nstartApp(config)\n                \n            \n\n\n\n\n            \n                \n                    start the application, including locale providers if possible \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAlpha\nThis project was generated with Angular CLI version 7.3.3.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            require   (src/.../language-detection.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/services/language-detection.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n\n                \n                    \n                        Grab a handle to webpack's require \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
